// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: blog.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBlog = `-- name: CreateBlog :one
INSERT INTO blog (id, pair_id, user_id, title, content, picture)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, pair_id, title, content, picture, create_time, update_time
`

type CreateBlogParams struct {
	ID      uuid.UUID `json:"id"`
	PairID  int64     `json:"pair_id"`
	UserID  uuid.UUID `json:"user_id"`
	Title   string    `json:"title"`
	Content string    `json:"content"`
	Picture string    `json:"picture"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRowContext(ctx, createBlog,
		arg.ID,
		arg.PairID,
		arg.UserID,
		arg.Title,
		arg.Content,
		arg.Picture,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PairID,
		&i.Title,
		&i.Content,
		&i.Picture,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getBlog = `-- name: GetBlog :one
SELECT id, user_id, pair_id, title, content, picture, create_time, update_time FROM blog
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBlog(ctx context.Context, id uuid.UUID) (Blog, error) {
	row := q.db.QueryRowContext(ctx, getBlog, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PairID,
		&i.Title,
		&i.Content,
		&i.Picture,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

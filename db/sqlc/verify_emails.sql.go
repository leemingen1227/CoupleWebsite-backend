// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: verify_emails.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO verify_emails (user_id, email, secret_code)
VALUES ($1, $2, $3)
RETURNING id, user_id, email, secret_code, is_used, create_time, expired_time
`

type CreateVerifyEmailParams struct {
	UserID     uuid.UUID `json:"user_id"`
	Email      string    `json:"email"`
	SecretCode string    `json:"secret_code"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, createVerifyEmail, arg.UserID, arg.Email, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreateTime,
		&i.ExpiredTime,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE verify_emails
SET is_used = true
WHERE id = $1
AND secret_code = $2
AND is_used = false
AND expired_time > now()
RETURNING id, user_id, email, secret_code, is_used, create_time, expired_time
`

type UpdateVerifyEmailParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, updateVerifyEmail, arg.ID, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreateTime,
		&i.ExpiredTime,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password_digest, name, pair_id, is_email_verified)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, password_digest, name, is_email_verified, pair_id, create_time, update_time
`

type CreateUserParams struct {
	ID              uuid.UUID     `json:"id"`
	Email           string        `json:"email"`
	PasswordDigest  string        `json:"password_digest"`
	Name            string        `json:"name"`
	PairID          sql.NullInt64 `json:"pair_id"`
	IsEmailVerified bool          `json:"is_email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordDigest,
		arg.Name,
		arg.PairID,
		arg.IsEmailVerified,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordDigest,
		&i.Name,
		&i.IsEmailVerified,
		&i.PairID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password_digest, name, is_email_verified, pair_id, create_time, update_time FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordDigest,
		&i.Name,
		&i.IsEmailVerified,
		&i.PairID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_digest, name, is_email_verified, pair_id, create_time, update_time FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordDigest,
		&i.Name,
		&i.IsEmailVerified,
		&i.PairID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = COALESCE($1, email),
    password_digest = COALESCE($2, password_digest),
    name = COALESCE($3, name),
    is_email_verified = COALESCE($4, is_email_verified),
    pair_id = COALESCE($5, pair_id),
    update_time = current_timestamp
WHERE id = $6
RETURNING id, email, password_digest, name, is_email_verified, pair_id, create_time, update_time
`

type UpdateUserParams struct {
	Email           sql.NullString `json:"email"`
	PasswordDigest  sql.NullString `json:"password_digest"`
	Name            sql.NullString `json:"name"`
	IsEmailVerified sql.NullBool   `json:"is_email_verified"`
	PairID          sql.NullInt64  `json:"pair_id"`
	ID              uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.PasswordDigest,
		arg.Name,
		arg.IsEmailVerified,
		arg.PairID,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordDigest,
		&i.Name,
		&i.IsEmailVerified,
		&i.PairID,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}
